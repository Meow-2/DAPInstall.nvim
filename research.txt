

The idea of this plugin is for it to manage debuggers for several programming lenguages that nvim-dap supports. The plugin must be able to:

	1. Install debuggers
	2. Uninstall debuggers
	3. List debuggers (?)


For that it will have these commands:

	1. DIInstall <debugger>
	2. DIUninstall <debugger>
	3. DIList



Things to evaluate:
	+ Since there is no way to "grab default configs", there should be a directory that holds all the configs.
	+ There should be list with the available debuggers
	+ There should be a setup() func to load the configs for each server
		+,i0 Setup will check if the config dir exists, else create it
	+ There should be a config({}) func to configure stuff for any given server
		+,i1 Config will configure a debugger

List of Debuggers:

+ Debugpy							(python_dbg)			(python)			(adapters; configurations)
+ Lldb-vscode (C, CPP, Rust)		(lldbgccr_dbg)			(C, CPP, Rust)		(adapters)
+ VSC-cpptools (C, CPP, Rust)		(vscccr_dbg)			(C, CPP, Rust)		(adapters)
+ Go								(go_dbg)				(Go)				(adapters; configurations)
+ Go (using delve directly)			(godelve_dbg)			(Go)				(adapters; configurations)
+ Java								(java_dbg)				(Java)
+ Mockdebug							(markdown_dbg)			(Markdown)			(adapters; configurations)
+ Readapt							(ruby_dbg)				(Ruby)				(adapters; configurations)
+ Dart-debugger						(dart_dbg)				(Dart)				(adapters; configurations)
+ haskell-debug-adapter				(haskell_dbg)			(Haskell)			(adapters; configurations)
+ node-debug2						(jsnode_dbg)			(JS/Node)			(adapters; configurations)
+ vscode-php-debug					(vscphp_dbg)			(Php)				(adapters; configurations)
+ Nvim-metals						(metals_dbg)			(Scala)
+ OSSFV								(ossfv_dbg)				(Lua)				(adapters; configurations)
+ netcoredbg						(netcore_dbg)			(.NET, Csharp)		(adapters; configurations)
